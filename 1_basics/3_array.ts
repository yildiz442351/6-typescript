/*
 * Array:
 *  Typescript'de dizilerin t,ipini tasnÄ±marken sadce bu deÄŸiÅŸken
 * bir dizi olucak demiyoruz. Bu dizinin iÃ§erisnde ÅŸu tipte elemamlar
 * olucak ÅŸeklinde tanÄ±m yapÄ±yoruz.
 * SonuÃ§ olrak dizinin elemanlarÄ±nÄ±n veri tipinede sÃ¶ylememeiz gereker 

 * TanÄ±m:
 * tip[]
*/

let users: string[] = ['GÃ¼l', 'Fatma', 'Ali'];

// users = [12,45,78]

users.push('Veli');
// users.unshift(60);
// users.push(60);

//* Not: BÃ¼tÃ¼n dizi methodlarÄ±da belirlediÄŸimi tipe uygun Ã§alÄ±ÅŸÄ±r.

const ages: number[] = [123, 56, 89];
ages.push(67);

const licences: boolean[] = [true, false, true];

/*

* Soru: Bir dizinin iÃ§inde farkÄ± veri tipi tutmak istersek ne yapparÄ±z?

* Cevap: Normalde dizinin iÃ§erisnde tek bir tÃ¼rde veri olmasÄ± beklenir.
* BazÄ± durumlarda birden faklÄ± tÃ¼rde veri alan diziler olabilir.
* Birden fazla tÃ¼rde veri alan diziler tanÄ±mlayabilmek iÃ§in "unionTypes"
* Union Types (BirleÅŸik Tipler) oluÅŸturabilmek iÃ§in "|" kullanÄ±rlÄ±r
* string | number > "ya string olsun ya number olsun"
*/

// dizide ya string olsun yada null olabilir
let teachers: (string | null | number)[] = [
  'UÄŸur',
  null,
  'Ahmet',
  null,
  'Ali',
  56,
];

/*
 * Ben bÃ¶yle hayal etmiÅŸtim  let users:string[] || number[] ğŸ˜„
 */

// ya stringlerden oluÅŸan bir dizi olsun yada numberlardan oluÅŸan bir dizi olsun
let test_arr: string[] | number[];

test_arr = ['asdass', 'asdasd', 'asdasd'];
test_arr = [11, 56, 678, 2345, 56];
// test_arr = ['sasd', 1231];